
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aaa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d68  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000922  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <main>
  64:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enInit>:
#include "DIO_private.h"
#include "DIO_config.h"
#include "STD_MATH.h"
//Port operations
ES_t DIO_enInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState=ES_OK;
  76:	19 82       	std	Y+1, r1	; 0x01
    DDRA = Conc(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	80 83       	st	Z, r24
    DDRB = Conc(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
  80:	e7 e3       	ldi	r30, 0x37	; 55
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
    DDRC = Conc(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	8f e7       	ldi	r24, 0x7F	; 127
  8c:	80 83       	st	Z, r24
    DDRD = Conc(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
  8e:	e1 e3       	ldi	r30, 0x31	; 49
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
    PORTA = Conc(PA_PIN7_VALUE,PA_PIN6_VALUE,PA_PIN5_VALUE,PA_PIN4_VALUE,PA_PIN3_VALUE,PA_PIN2_VALUE,PA_PIN1_VALUE,PA_PIN0_VALUE);
  96:	eb e3       	ldi	r30, 0x3B	; 59
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
    PORTB = Conc(PB_PIN7_VALUE,PB_PIN6_VALUE,PB_PIN5_VALUE,PB_PIN4_VALUE,PB_PIN3_VALUE,PB_PIN2_VALUE,PB_PIN1_VALUE,PB_PIN0_VALUE);
  9c:	e8 e3       	ldi	r30, 0x38	; 56
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	80 83       	st	Z, r24
    PORTC = Conc(PC_PIN7_VALUE,PC_PIN6_VALUE,PC_PIN5_VALUE,PC_PIN4_VALUE,PC_PIN3_VALUE,PC_PIN2_VALUE,PC_PIN1_VALUE,PC_PIN0_VALUE);
  a4:	e5 e3       	ldi	r30, 0x35	; 53
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	80 83       	st	Z, r24
    PORTB = Conc(PB_PIN7_VALUE,PB_PIN6_VALUE,PB_PIN5_VALUE,PB_PIN4_VALUE,PB_PIN3_VALUE,PB_PIN2_VALUE,PB_PIN1_VALUE,PB_PIN0_VALUE);
  ac:	e8 e3       	ldi	r30, 0x38	; 56
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	80 83       	st	Z, r24

    return Local_enuErrorState;
  b4:	89 81       	ldd	r24, Y+1	; 0x01
}
  b6:	0f 90       	pop	r0
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_enuSetPortDirection>:
ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID,u8 Copy_u8Value)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_enuSetPortDirection+0x6>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DIO_enuSetPortDirection+0x8>
  c6:	0f 92       	push	r0
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	8a 83       	std	Y+2, r24	; 0x02
  ce:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState=ES_OK;
  d0:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8PortID)
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	3d 83       	std	Y+5, r19	; 0x05
  da:	2c 83       	std	Y+4, r18	; 0x04
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	9d 81       	ldd	r25, Y+5	; 0x05
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	91 05       	cpc	r25, r1
  e4:	d1 f0       	breq	.+52     	; 0x11a <DIO_enuSetPortDirection+0x5c>
  e6:	2c 81       	ldd	r18, Y+4	; 0x04
  e8:	3d 81       	ldd	r19, Y+5	; 0x05
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	31 05       	cpc	r19, r1
  ee:	2c f4       	brge	.+10     	; 0xfa <DIO_enuSetPortDirection+0x3c>
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	9d 81       	ldd	r25, Y+5	; 0x05
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	61 f0       	breq	.+24     	; 0x110 <DIO_enuSetPortDirection+0x52>
  f8:	1f c0       	rjmp	.+62     	; 0x138 <DIO_enuSetPortDirection+0x7a>
  fa:	2c 81       	ldd	r18, Y+4	; 0x04
  fc:	3d 81       	ldd	r19, Y+5	; 0x05
  fe:	22 30       	cpi	r18, 0x02	; 2
 100:	31 05       	cpc	r19, r1
 102:	81 f0       	breq	.+32     	; 0x124 <DIO_enuSetPortDirection+0x66>
 104:	8c 81       	ldd	r24, Y+4	; 0x04
 106:	9d 81       	ldd	r25, Y+5	; 0x05
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	91 05       	cpc	r25, r1
 10c:	81 f0       	breq	.+32     	; 0x12e <DIO_enuSetPortDirection+0x70>
 10e:	14 c0       	rjmp	.+40     	; 0x138 <DIO_enuSetPortDirection+0x7a>
    {
    case DIO_PORTA:
        DDRA=Copy_u8Value;
 110:	ea e3       	ldi	r30, 0x3A	; 58
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	80 83       	st	Z, r24
 118:	11 c0       	rjmp	.+34     	; 0x13c <DIO_enuSetPortDirection+0x7e>
        break;
    case DIO_PORTB:
        DDRB=Copy_u8Value;
 11a:	e7 e3       	ldi	r30, 0x37	; 55
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	80 83       	st	Z, r24
 122:	0c c0       	rjmp	.+24     	; 0x13c <DIO_enuSetPortDirection+0x7e>
        break;
    case DIO_PORTC:
        DDRC=Copy_u8Value;
 124:	e4 e3       	ldi	r30, 0x34	; 52
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	80 83       	st	Z, r24
 12c:	07 c0       	rjmp	.+14     	; 0x13c <DIO_enuSetPortDirection+0x7e>
        break;
    case DIO_PORTD:
        DDRD=Copy_u8Value;
 12e:	e1 e3       	ldi	r30, 0x31	; 49
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	80 83       	st	Z, r24
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_enuSetPortDirection+0x7e>
        break;
    default:
        Local_enuErrorState=ES_OUT_OF_RANGE;
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 13c:	89 81       	ldd	r24, Y+1	; 0x01
}
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <DIO_enuSetPortValue>:
ES_t DIO_enuSetPortValue(u8 Copy_u8PortID,u8 Copy_u8Value)
{
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	00 d0       	rcall	.+0      	; 0x154 <DIO_enuSetPortValue+0x6>
 154:	00 d0       	rcall	.+0      	; 0x156 <DIO_enuSetPortValue+0x8>
 156:	0f 92       	push	r0
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	8a 83       	std	Y+2, r24	; 0x02
 15e:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState=ES_OK;
 160:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8PortID)
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	3d 83       	std	Y+5, r19	; 0x05
 16a:	2c 83       	std	Y+4, r18	; 0x04
 16c:	8c 81       	ldd	r24, Y+4	; 0x04
 16e:	9d 81       	ldd	r25, Y+5	; 0x05
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	91 05       	cpc	r25, r1
 174:	d1 f0       	breq	.+52     	; 0x1aa <DIO_enuSetPortValue+0x5c>
 176:	2c 81       	ldd	r18, Y+4	; 0x04
 178:	3d 81       	ldd	r19, Y+5	; 0x05
 17a:	22 30       	cpi	r18, 0x02	; 2
 17c:	31 05       	cpc	r19, r1
 17e:	2c f4       	brge	.+10     	; 0x18a <DIO_enuSetPortValue+0x3c>
 180:	8c 81       	ldd	r24, Y+4	; 0x04
 182:	9d 81       	ldd	r25, Y+5	; 0x05
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	61 f0       	breq	.+24     	; 0x1a0 <DIO_enuSetPortValue+0x52>
 188:	1f c0       	rjmp	.+62     	; 0x1c8 <DIO_enuSetPortValue+0x7a>
 18a:	2c 81       	ldd	r18, Y+4	; 0x04
 18c:	3d 81       	ldd	r19, Y+5	; 0x05
 18e:	22 30       	cpi	r18, 0x02	; 2
 190:	31 05       	cpc	r19, r1
 192:	81 f0       	breq	.+32     	; 0x1b4 <DIO_enuSetPortValue+0x66>
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	91 05       	cpc	r25, r1
 19c:	81 f0       	breq	.+32     	; 0x1be <DIO_enuSetPortValue+0x70>
 19e:	14 c0       	rjmp	.+40     	; 0x1c8 <DIO_enuSetPortValue+0x7a>
    {
    case DIO_PORTA:
        PORTA=Copy_u8Value;
 1a0:	eb e3       	ldi	r30, 0x3B	; 59
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	80 83       	st	Z, r24
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <DIO_enuSetPortValue+0x7e>
        break;
    case DIO_PORTB:
        PORTB=Copy_u8Value;
 1aa:	e8 e3       	ldi	r30, 0x38	; 56
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	80 83       	st	Z, r24
 1b2:	0c c0       	rjmp	.+24     	; 0x1cc <DIO_enuSetPortValue+0x7e>
        break;
    case DIO_PORTC:
        PORTC=Copy_u8Value;
 1b4:	e5 e3       	ldi	r30, 0x35	; 53
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	80 83       	st	Z, r24
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <DIO_enuSetPortValue+0x7e>
        break;
    case DIO_PORTD:
        PORTD=Copy_u8Value;
 1be:	e2 e3       	ldi	r30, 0x32	; 50
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	80 83       	st	Z, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_enuSetPortValue+0x7e>
        break;
    default:
        Local_enuErrorState=ES_OUT_OF_RANGE;
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	cf 91       	pop	r28
 1da:	df 91       	pop	r29
 1dc:	08 95       	ret

000001de <DIO_enutogglePort>:
ES_t DIO_enutogglePort(u8 Copy_u8PortID)
{
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <DIO_enutogglePort+0x6>
 1e4:	00 d0       	rcall	.+0      	; 0x1e6 <DIO_enutogglePort+0x8>
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorState=ES_OK;
 1ec:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8PortID)
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	28 2f       	mov	r18, r24
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	3c 83       	std	Y+4, r19	; 0x04
 1f6:	2b 83       	std	Y+3, r18	; 0x03
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	9c 81       	ldd	r25, Y+4	; 0x04
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	91 05       	cpc	r25, r1
 200:	e9 f0       	breq	.+58     	; 0x23c <DIO_enutogglePort+0x5e>
 202:	2b 81       	ldd	r18, Y+3	; 0x03
 204:	3c 81       	ldd	r19, Y+4	; 0x04
 206:	22 30       	cpi	r18, 0x02	; 2
 208:	31 05       	cpc	r19, r1
 20a:	2c f4       	brge	.+10     	; 0x216 <DIO_enutogglePort+0x38>
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	61 f0       	breq	.+24     	; 0x22c <DIO_enutogglePort+0x4e>
 214:	2b c0       	rjmp	.+86     	; 0x26c <DIO_enutogglePort+0x8e>
 216:	2b 81       	ldd	r18, Y+3	; 0x03
 218:	3c 81       	ldd	r19, Y+4	; 0x04
 21a:	22 30       	cpi	r18, 0x02	; 2
 21c:	31 05       	cpc	r19, r1
 21e:	b1 f0       	breq	.+44     	; 0x24c <DIO_enutogglePort+0x6e>
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	9c 81       	ldd	r25, Y+4	; 0x04
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	91 05       	cpc	r25, r1
 228:	c9 f0       	breq	.+50     	; 0x25c <DIO_enutogglePort+0x7e>
 22a:	20 c0       	rjmp	.+64     	; 0x26c <DIO_enutogglePort+0x8e>
    {
    case DIO_PORTA:
        PORTA=~PORTA;
 22c:	ab e3       	ldi	r26, 0x3B	; 59
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	eb e3       	ldi	r30, 0x3B	; 59
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 95       	com	r24
 238:	8c 93       	st	X, r24
 23a:	1a c0       	rjmp	.+52     	; 0x270 <DIO_enutogglePort+0x92>
        break;
    case DIO_PORTB:
        PORTB=~PORTB;
 23c:	a8 e3       	ldi	r26, 0x38	; 56
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e8 e3       	ldi	r30, 0x38	; 56
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 95       	com	r24
 248:	8c 93       	st	X, r24
 24a:	12 c0       	rjmp	.+36     	; 0x270 <DIO_enutogglePort+0x92>
        break;
    case DIO_PORTC:
        PORTC=~PORTC;
 24c:	a5 e3       	ldi	r26, 0x35	; 53
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e5 e3       	ldi	r30, 0x35	; 53
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 95       	com	r24
 258:	8c 93       	st	X, r24
 25a:	0a c0       	rjmp	.+20     	; 0x270 <DIO_enutogglePort+0x92>
        break;
    case DIO_PORTD:
        PORTD=~PORTD;
 25c:	a2 e3       	ldi	r26, 0x32	; 50
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e2 e3       	ldi	r30, 0x32	; 50
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	80 95       	com	r24
 268:	8c 93       	st	X, r24
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_enutogglePort+0x92>
        break;
    default:
        Local_enuErrorState=ES_OUT_OF_RANGE;
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 270:	89 81       	ldd	r24, Y+1	; 0x01
}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <DIO_enuGetPortValue>:
ES_t DIO_enuGetPortValue(u8 Copy_u8PortID,u8 * Copy_pu8Value)
{
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	00 d0       	rcall	.+0      	; 0x286 <DIO_enuGetPortValue+0x6>
 286:	00 d0       	rcall	.+0      	; 0x288 <DIO_enuGetPortValue+0x8>
 288:	00 d0       	rcall	.+0      	; 0x28a <DIO_enuGetPortValue+0xa>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	7c 83       	std	Y+4, r23	; 0x04
 292:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState=ES_OK;
 294:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pu8Value!=NULL)
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	9c 81       	ldd	r25, Y+4	; 0x04
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	09 f4       	brne	.+2      	; 0x2a0 <DIO_enuGetPortValue+0x20>
 29e:	3e c0       	rjmp	.+124    	; 0x31c <DIO_enuGetPortValue+0x9c>
    {
        switch(Copy_u8PortID)
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	3e 83       	std	Y+6, r19	; 0x06
 2a8:	2d 83       	std	Y+5, r18	; 0x05
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	91 05       	cpc	r25, r1
 2b2:	e1 f0       	breq	.+56     	; 0x2ec <DIO_enuGetPortValue+0x6c>
 2b4:	2d 81       	ldd	r18, Y+5	; 0x05
 2b6:	3e 81       	ldd	r19, Y+6	; 0x06
 2b8:	22 30       	cpi	r18, 0x02	; 2
 2ba:	31 05       	cpc	r19, r1
 2bc:	2c f4       	brge	.+10     	; 0x2c8 <DIO_enuGetPortValue+0x48>
 2be:	8d 81       	ldd	r24, Y+5	; 0x05
 2c0:	9e 81       	ldd	r25, Y+6	; 0x06
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	61 f0       	breq	.+24     	; 0x2de <DIO_enuGetPortValue+0x5e>
 2c6:	27 c0       	rjmp	.+78     	; 0x316 <DIO_enuGetPortValue+0x96>
 2c8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ca:	3e 81       	ldd	r19, Y+6	; 0x06
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	a1 f0       	breq	.+40     	; 0x2fa <DIO_enuGetPortValue+0x7a>
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	9e 81       	ldd	r25, Y+6	; 0x06
 2d6:	83 30       	cpi	r24, 0x03	; 3
 2d8:	91 05       	cpc	r25, r1
 2da:	b1 f0       	breq	.+44     	; 0x308 <DIO_enuGetPortValue+0x88>
 2dc:	1c c0       	rjmp	.+56     	; 0x316 <DIO_enuGetPortValue+0x96>
        {
        case DIO_PORTA:
            *Copy_pu8Value=PINA;
 2de:	e9 e3       	ldi	r30, 0x39	; 57
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	eb 81       	ldd	r30, Y+3	; 0x03
 2e6:	fc 81       	ldd	r31, Y+4	; 0x04
 2e8:	80 83       	st	Z, r24
 2ea:	1a c0       	rjmp	.+52     	; 0x320 <DIO_enuGetPortValue+0xa0>
            break;
        case DIO_PORTB:
            *Copy_pu8Value=PINB;
 2ec:	e6 e3       	ldi	r30, 0x36	; 54
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	eb 81       	ldd	r30, Y+3	; 0x03
 2f4:	fc 81       	ldd	r31, Y+4	; 0x04
 2f6:	80 83       	st	Z, r24
 2f8:	13 c0       	rjmp	.+38     	; 0x320 <DIO_enuGetPortValue+0xa0>
            break;
        case DIO_PORTC:
            *Copy_pu8Value=PINC;
 2fa:	e3 e3       	ldi	r30, 0x33	; 51
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	eb 81       	ldd	r30, Y+3	; 0x03
 302:	fc 81       	ldd	r31, Y+4	; 0x04
 304:	80 83       	st	Z, r24
 306:	0c c0       	rjmp	.+24     	; 0x320 <DIO_enuGetPortValue+0xa0>
            break;
        case DIO_PORTD:
            *Copy_pu8Value=PIND;
 308:	e0 e3       	ldi	r30, 0x30	; 48
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	eb 81       	ldd	r30, Y+3	; 0x03
 310:	fc 81       	ldd	r31, Y+4	; 0x04
 312:	80 83       	st	Z, r24
 314:	05 c0       	rjmp	.+10     	; 0x320 <DIO_enuGetPortValue+0xa0>
            break;
        default:
            Local_enuErrorState=ES_OUT_OF_RANGE;
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	89 83       	std	Y+1, r24	; 0x01
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_enuGetPortValue+0xa0>
        }
    }
    else
    {
        Local_enuErrorState=ES_NULL_POINTER;
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 320:	89 81       	ldd	r24, Y+1	; 0x01
}
 322:	26 96       	adiw	r28, 0x06	; 6
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	cf 91       	pop	r28
 330:	df 91       	pop	r29
 332:	08 95       	ret

00000334 <DIO_enuSetPinDirection>:
//Pin Operations
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8BitNumber,u8 Copy_u8Value)
{
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	28 97       	sbiw	r28, 0x08	; 8
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	8a 83       	std	Y+2, r24	; 0x02
 34a:	6b 83       	std	Y+3, r22	; 0x03
 34c:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState=ES_OK;
 34e:	19 82       	std	Y+1, r1	; 0x01
    // To unuse if and else use that code
    /*
     * DDRA&=~(1<<Copy_u8BitNumber);
     * DDRB|=(1<<Copy_u8BitNumber);
     */
    if(Copy_u8Value==OUTPUT)
 350:	8c 81       	ldd	r24, Y+4	; 0x04
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	09 f0       	breq	.+2      	; 0x358 <DIO_enuSetPinDirection+0x24>
 356:	6f c0       	rjmp	.+222    	; 0x436 <DIO_enuSetPinDirection+0x102>
    {
        switch(Copy_u8PortID)
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	38 87       	std	Y+8, r19	; 0x08
 360:	2f 83       	std	Y+7, r18	; 0x07
 362:	8f 81       	ldd	r24, Y+7	; 0x07
 364:	98 85       	ldd	r25, Y+8	; 0x08
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	91 05       	cpc	r25, r1
 36a:	49 f1       	breq	.+82     	; 0x3be <DIO_enuSetPinDirection+0x8a>
 36c:	2f 81       	ldd	r18, Y+7	; 0x07
 36e:	38 85       	ldd	r19, Y+8	; 0x08
 370:	22 30       	cpi	r18, 0x02	; 2
 372:	31 05       	cpc	r19, r1
 374:	2c f4       	brge	.+10     	; 0x380 <DIO_enuSetPinDirection+0x4c>
 376:	8f 81       	ldd	r24, Y+7	; 0x07
 378:	98 85       	ldd	r25, Y+8	; 0x08
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	61 f0       	breq	.+24     	; 0x396 <DIO_enuSetPinDirection+0x62>
 37e:	d5 c0       	rjmp	.+426    	; 0x52a <__stack+0xcb>
 380:	2f 81       	ldd	r18, Y+7	; 0x07
 382:	38 85       	ldd	r19, Y+8	; 0x08
 384:	22 30       	cpi	r18, 0x02	; 2
 386:	31 05       	cpc	r19, r1
 388:	71 f1       	breq	.+92     	; 0x3e6 <DIO_enuSetPinDirection+0xb2>
 38a:	8f 81       	ldd	r24, Y+7	; 0x07
 38c:	98 85       	ldd	r25, Y+8	; 0x08
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	91 05       	cpc	r25, r1
 392:	e9 f1       	breq	.+122    	; 0x40e <DIO_enuSetPinDirection+0xda>
 394:	ca c0       	rjmp	.+404    	; 0x52a <__stack+0xcb>
        {
        case DIO_PORTA:
            SET_BIT(DDRA,Copy_u8BitNumber);
 396:	aa e3       	ldi	r26, 0x3A	; 58
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	ea e3       	ldi	r30, 0x3A	; 58
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_enuSetPinDirection+0x80>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_enuSetPinDirection+0x7c>
 3b8:	84 2b       	or	r24, r20
 3ba:	8c 93       	st	X, r24
 3bc:	b6 c0       	rjmp	.+364    	; 0x52a <__stack+0xcb>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB,Copy_u8BitNumber);
 3be:	a7 e3       	ldi	r26, 0x37	; 55
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e7 e3       	ldi	r30, 0x37	; 55
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 2e       	mov	r0, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_enuSetPinDirection+0xa8>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_enuSetPinDirection+0xa4>
 3e0:	84 2b       	or	r24, r20
 3e2:	8c 93       	st	X, r24
 3e4:	a2 c0       	rjmp	.+324    	; 0x52a <__stack+0xcb>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC,Copy_u8BitNumber);
 3e6:	a4 e3       	ldi	r26, 0x34	; 52
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	e4 e3       	ldi	r30, 0x34	; 52
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	48 2f       	mov	r20, r24
 3f2:	8b 81       	ldd	r24, Y+3	; 0x03
 3f4:	28 2f       	mov	r18, r24
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 2e       	mov	r0, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_enuSetPinDirection+0xd0>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_enuSetPinDirection+0xcc>
 408:	84 2b       	or	r24, r20
 40a:	8c 93       	st	X, r24
 40c:	8e c0       	rjmp	.+284    	; 0x52a <__stack+0xcb>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD,Copy_u8BitNumber);
 40e:	a1 e3       	ldi	r26, 0x31	; 49
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	e1 e3       	ldi	r30, 0x31	; 49
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	48 2f       	mov	r20, r24
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 2e       	mov	r0, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_enuSetPinDirection+0xf8>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_enuSetPinDirection+0xf4>
 430:	84 2b       	or	r24, r20
 432:	8c 93       	st	X, r24
 434:	7a c0       	rjmp	.+244    	; 0x52a <__stack+0xcb>
            break;
        }
    }
    else if(Copy_u8Value==OUTPUT)
 436:	8c 81       	ldd	r24, Y+4	; 0x04
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	09 f0       	breq	.+2      	; 0x43e <DIO_enuSetPinDirection+0x10a>
 43c:	74 c0       	rjmp	.+232    	; 0x526 <__stack+0xc7>
    {
        switch(Copy_u8PortID)
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	3e 83       	std	Y+6, r19	; 0x06
 446:	2d 83       	std	Y+5, r18	; 0x05
 448:	8d 81       	ldd	r24, Y+5	; 0x05
 44a:	9e 81       	ldd	r25, Y+6	; 0x06
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	91 05       	cpc	r25, r1
 450:	59 f1       	breq	.+86     	; 0x4a8 <__stack+0x49>
 452:	2d 81       	ldd	r18, Y+5	; 0x05
 454:	3e 81       	ldd	r19, Y+6	; 0x06
 456:	22 30       	cpi	r18, 0x02	; 2
 458:	31 05       	cpc	r19, r1
 45a:	2c f4       	brge	.+10     	; 0x466 <__stack+0x7>
 45c:	8d 81       	ldd	r24, Y+5	; 0x05
 45e:	9e 81       	ldd	r25, Y+6	; 0x06
 460:	00 97       	sbiw	r24, 0x00	; 0
 462:	69 f0       	breq	.+26     	; 0x47e <__stack+0x1f>
 464:	62 c0       	rjmp	.+196    	; 0x52a <__stack+0xcb>
 466:	2d 81       	ldd	r18, Y+5	; 0x05
 468:	3e 81       	ldd	r19, Y+6	; 0x06
 46a:	22 30       	cpi	r18, 0x02	; 2
 46c:	31 05       	cpc	r19, r1
 46e:	89 f1       	breq	.+98     	; 0x4d2 <__stack+0x73>
 470:	8d 81       	ldd	r24, Y+5	; 0x05
 472:	9e 81       	ldd	r25, Y+6	; 0x06
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	91 05       	cpc	r25, r1
 478:	09 f4       	brne	.+2      	; 0x47c <__stack+0x1d>
 47a:	40 c0       	rjmp	.+128    	; 0x4fc <__stack+0x9d>
 47c:	56 c0       	rjmp	.+172    	; 0x52a <__stack+0xcb>
        {
        case DIO_PORTA:
            CLEAR_BIT(DDRA,Copy_u8BitNumber);
 47e:	aa e3       	ldi	r26, 0x3A	; 58
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	ea e3       	ldi	r30, 0x3A	; 58
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	48 2f       	mov	r20, r24
 48a:	8b 81       	ldd	r24, Y+3	; 0x03
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 2e       	mov	r0, r18
 496:	02 c0       	rjmp	.+4      	; 0x49c <__stack+0x3d>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__stack+0x39>
 4a0:	80 95       	com	r24
 4a2:	84 23       	and	r24, r20
 4a4:	8c 93       	st	X, r24
 4a6:	41 c0       	rjmp	.+130    	; 0x52a <__stack+0xcb>
            break;
        case DIO_PORTB:
            CLEAR_BIT(DDRB,Copy_u8BitNumber);
 4a8:	a7 e3       	ldi	r26, 0x37	; 55
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e7 e3       	ldi	r30, 0x37	; 55
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 2e       	mov	r0, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__stack+0x67>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__stack+0x63>
 4ca:	80 95       	com	r24
 4cc:	84 23       	and	r24, r20
 4ce:	8c 93       	st	X, r24
 4d0:	2c c0       	rjmp	.+88     	; 0x52a <__stack+0xcb>
            break;
        case DIO_PORTC:
            CLEAR_BIT(DDRC,Copy_u8BitNumber);
 4d2:	a4 e3       	ldi	r26, 0x34	; 52
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e4 e3       	ldi	r30, 0x34	; 52
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8b 81       	ldd	r24, Y+3	; 0x03
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__stack+0x91>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__stack+0x8d>
 4f4:	80 95       	com	r24
 4f6:	84 23       	and	r24, r20
 4f8:	8c 93       	st	X, r24
 4fa:	17 c0       	rjmp	.+46     	; 0x52a <__stack+0xcb>
            break;
        case DIO_PORTD:
            CLEAR_BIT(DDRD,Copy_u8BitNumber);
 4fc:	a1 e3       	ldi	r26, 0x31	; 49
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e1 e3       	ldi	r30, 0x31	; 49
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	48 2f       	mov	r20, r24
 508:	8b 81       	ldd	r24, Y+3	; 0x03
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 2e       	mov	r0, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <__stack+0xbb>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <__stack+0xb7>
 51e:	80 95       	com	r24
 520:	84 23       	and	r24, r20
 522:	8c 93       	st	X, r24
 524:	02 c0       	rjmp	.+4      	; 0x52a <__stack+0xcb>
            break;
        }
    }
    else
    {
        Local_enuErrorState=ES_OUT_OF_RANGE;
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 52a:	89 81       	ldd	r24, Y+1	; 0x01
}
 52c:	28 96       	adiw	r28, 0x08	; 8
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <DIO_enuSetPinValue>:
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID,u8 Copy_u8BitNumber,u8 Copy_u8Value)
{
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	28 97       	sbiw	r28, 0x08	; 8
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	8a 83       	std	Y+2, r24	; 0x02
 554:	6b 83       	std	Y+3, r22	; 0x03
 556:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState=ES_OK;
 558:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8PortID<=PORTD&&Copy_u8BitNumber<=DIO_PIN7)
 55a:	e2 e3       	ldi	r30, 0x32	; 50
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	90 81       	ld	r25, Z
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	98 17       	cp	r25, r24
 564:	08 f4       	brcc	.+2      	; 0x568 <DIO_enuSetPinValue+0x2a>
 566:	eb c0       	rjmp	.+470    	; 0x73e <DIO_enuSetPinValue+0x200>
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	88 30       	cpi	r24, 0x08	; 8
 56c:	08 f0       	brcs	.+2      	; 0x570 <DIO_enuSetPinValue+0x32>
 56e:	e7 c0       	rjmp	.+462    	; 0x73e <DIO_enuSetPinValue+0x200>
    {
        if(Copy_u8Value==HIGH)
 570:	8c 81       	ldd	r24, Y+4	; 0x04
 572:	81 30       	cpi	r24, 0x01	; 1
 574:	09 f0       	breq	.+2      	; 0x578 <DIO_enuSetPinValue+0x3a>
 576:	6f c0       	rjmp	.+222    	; 0x656 <DIO_enuSetPinValue+0x118>
        {
            switch(Copy_u8PortID)
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	38 87       	std	Y+8, r19	; 0x08
 580:	2f 83       	std	Y+7, r18	; 0x07
 582:	8f 81       	ldd	r24, Y+7	; 0x07
 584:	98 85       	ldd	r25, Y+8	; 0x08
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	91 05       	cpc	r25, r1
 58a:	49 f1       	breq	.+82     	; 0x5de <DIO_enuSetPinValue+0xa0>
 58c:	2f 81       	ldd	r18, Y+7	; 0x07
 58e:	38 85       	ldd	r19, Y+8	; 0x08
 590:	22 30       	cpi	r18, 0x02	; 2
 592:	31 05       	cpc	r19, r1
 594:	2c f4       	brge	.+10     	; 0x5a0 <DIO_enuSetPinValue+0x62>
 596:	8f 81       	ldd	r24, Y+7	; 0x07
 598:	98 85       	ldd	r25, Y+8	; 0x08
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	61 f0       	breq	.+24     	; 0x5b6 <DIO_enuSetPinValue+0x78>
 59e:	d1 c0       	rjmp	.+418    	; 0x742 <DIO_enuSetPinValue+0x204>
 5a0:	2f 81       	ldd	r18, Y+7	; 0x07
 5a2:	38 85       	ldd	r19, Y+8	; 0x08
 5a4:	22 30       	cpi	r18, 0x02	; 2
 5a6:	31 05       	cpc	r19, r1
 5a8:	71 f1       	breq	.+92     	; 0x606 <DIO_enuSetPinValue+0xc8>
 5aa:	8f 81       	ldd	r24, Y+7	; 0x07
 5ac:	98 85       	ldd	r25, Y+8	; 0x08
 5ae:	83 30       	cpi	r24, 0x03	; 3
 5b0:	91 05       	cpc	r25, r1
 5b2:	e9 f1       	breq	.+122    	; 0x62e <DIO_enuSetPinValue+0xf0>
 5b4:	c6 c0       	rjmp	.+396    	; 0x742 <DIO_enuSetPinValue+0x204>
            {
            case DIO_PORTA:
                SET_BIT(PORTA,Copy_u8BitNumber);
 5b6:	ab e3       	ldi	r26, 0x3B	; 59
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	eb e3       	ldi	r30, 0x3B	; 59
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 2e       	mov	r0, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_enuSetPinValue+0x96>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_enuSetPinValue+0x92>
 5d8:	84 2b       	or	r24, r20
 5da:	8c 93       	st	X, r24
 5dc:	b2 c0       	rjmp	.+356    	; 0x742 <DIO_enuSetPinValue+0x204>
                break;
            case DIO_PORTB:
                SET_BIT(PORTB,Copy_u8BitNumber);
 5de:	a8 e3       	ldi	r26, 0x38	; 56
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	e8 e3       	ldi	r30, 0x38	; 56
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	48 2f       	mov	r20, r24
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 2e       	mov	r0, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_enuSetPinValue+0xbe>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_enuSetPinValue+0xba>
 600:	84 2b       	or	r24, r20
 602:	8c 93       	st	X, r24
 604:	9e c0       	rjmp	.+316    	; 0x742 <DIO_enuSetPinValue+0x204>
                break;
            case DIO_PORTC:
                SET_BIT(PORTC,Copy_u8BitNumber);
 606:	a5 e3       	ldi	r26, 0x35	; 53
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e5 e3       	ldi	r30, 0x35	; 53
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	48 2f       	mov	r20, r24
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 2e       	mov	r0, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_enuSetPinValue+0xe6>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	0a 94       	dec	r0
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_enuSetPinValue+0xe2>
 628:	84 2b       	or	r24, r20
 62a:	8c 93       	st	X, r24
 62c:	8a c0       	rjmp	.+276    	; 0x742 <DIO_enuSetPinValue+0x204>
                break;
            case DIO_PORTD:
                SET_BIT(PORTD,Copy_u8BitNumber);
 62e:	a2 e3       	ldi	r26, 0x32	; 50
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	e2 e3       	ldi	r30, 0x32	; 50
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	48 2f       	mov	r20, r24
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 2e       	mov	r0, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_enuSetPinValue+0x10e>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_enuSetPinValue+0x10a>
 650:	84 2b       	or	r24, r20
 652:	8c 93       	st	X, r24
 654:	76 c0       	rjmp	.+236    	; 0x742 <DIO_enuSetPinValue+0x204>
                break;
            }
        }
        else
        {
            switch(Copy_u8PortID)
 656:	8a 81       	ldd	r24, Y+2	; 0x02
 658:	28 2f       	mov	r18, r24
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	3e 83       	std	Y+6, r19	; 0x06
 65e:	2d 83       	std	Y+5, r18	; 0x05
 660:	8d 81       	ldd	r24, Y+5	; 0x05
 662:	9e 81       	ldd	r25, Y+6	; 0x06
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	91 05       	cpc	r25, r1
 668:	59 f1       	breq	.+86     	; 0x6c0 <DIO_enuSetPinValue+0x182>
 66a:	2d 81       	ldd	r18, Y+5	; 0x05
 66c:	3e 81       	ldd	r19, Y+6	; 0x06
 66e:	22 30       	cpi	r18, 0x02	; 2
 670:	31 05       	cpc	r19, r1
 672:	2c f4       	brge	.+10     	; 0x67e <DIO_enuSetPinValue+0x140>
 674:	8d 81       	ldd	r24, Y+5	; 0x05
 676:	9e 81       	ldd	r25, Y+6	; 0x06
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	69 f0       	breq	.+26     	; 0x696 <DIO_enuSetPinValue+0x158>
 67c:	62 c0       	rjmp	.+196    	; 0x742 <DIO_enuSetPinValue+0x204>
 67e:	2d 81       	ldd	r18, Y+5	; 0x05
 680:	3e 81       	ldd	r19, Y+6	; 0x06
 682:	22 30       	cpi	r18, 0x02	; 2
 684:	31 05       	cpc	r19, r1
 686:	89 f1       	breq	.+98     	; 0x6ea <DIO_enuSetPinValue+0x1ac>
 688:	8d 81       	ldd	r24, Y+5	; 0x05
 68a:	9e 81       	ldd	r25, Y+6	; 0x06
 68c:	83 30       	cpi	r24, 0x03	; 3
 68e:	91 05       	cpc	r25, r1
 690:	09 f4       	brne	.+2      	; 0x694 <DIO_enuSetPinValue+0x156>
 692:	40 c0       	rjmp	.+128    	; 0x714 <DIO_enuSetPinValue+0x1d6>
 694:	56 c0       	rjmp	.+172    	; 0x742 <DIO_enuSetPinValue+0x204>
            {
            case DIO_PORTA:
                CLEAR_BIT(PORTA,Copy_u8BitNumber);
 696:	ab e3       	ldi	r26, 0x3B	; 59
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	eb e3       	ldi	r30, 0x3B	; 59
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	48 2f       	mov	r20, r24
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 2e       	mov	r0, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_enuSetPinValue+0x176>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	0a 94       	dec	r0
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_enuSetPinValue+0x172>
 6b8:	80 95       	com	r24
 6ba:	84 23       	and	r24, r20
 6bc:	8c 93       	st	X, r24
 6be:	41 c0       	rjmp	.+130    	; 0x742 <DIO_enuSetPinValue+0x204>
                break;
            case DIO_PORTB:
                CLEAR_BIT(PORTB,Copy_u8BitNumber);
 6c0:	a8 e3       	ldi	r26, 0x38	; 56
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	e8 e3       	ldi	r30, 0x38	; 56
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	48 2f       	mov	r20, r24
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 2e       	mov	r0, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_enuSetPinValue+0x1a0>
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	0a 94       	dec	r0
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_enuSetPinValue+0x19c>
 6e2:	80 95       	com	r24
 6e4:	84 23       	and	r24, r20
 6e6:	8c 93       	st	X, r24
 6e8:	2c c0       	rjmp	.+88     	; 0x742 <DIO_enuSetPinValue+0x204>
                break;
            case DIO_PORTC:
                CLEAR_BIT(PORTC,Copy_u8BitNumber);
 6ea:	a5 e3       	ldi	r26, 0x35	; 53
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e5 e3       	ldi	r30, 0x35	; 53
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	48 2f       	mov	r20, r24
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	28 2f       	mov	r18, r24
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 2e       	mov	r0, r18
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_enuSetPinValue+0x1ca>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_enuSetPinValue+0x1c6>
 70c:	80 95       	com	r24
 70e:	84 23       	and	r24, r20
 710:	8c 93       	st	X, r24
 712:	17 c0       	rjmp	.+46     	; 0x742 <DIO_enuSetPinValue+0x204>
                break;
            case DIO_PORTD:
                CLEAR_BIT(PORTD,Copy_u8BitNumber);
 714:	a2 e3       	ldi	r26, 0x32	; 50
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	e2 e3       	ldi	r30, 0x32	; 50
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	48 2f       	mov	r20, r24
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 2e       	mov	r0, r18
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_enuSetPinValue+0x1f4>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_enuSetPinValue+0x1f0>
 736:	80 95       	com	r24
 738:	84 23       	and	r24, r20
 73a:	8c 93       	st	X, r24
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_enuSetPinValue+0x204>
            }
        }
    }
    else
    {
        Local_enuErrorState=ES_OUT_OF_RANGE;
 73e:	83 e0       	ldi	r24, 0x03	; 3
 740:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 742:	89 81       	ldd	r24, Y+1	; 0x01
}
 744:	28 96       	adiw	r28, 0x08	; 8
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	cf 91       	pop	r28
 752:	df 91       	pop	r29
 754:	08 95       	ret

00000756 <DIO_enutogglePinr>:
ES_t DIO_enutogglePinr(u8 Copy_u8PortID,u8 Copy_u8BitNumber)
{
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	00 d0       	rcall	.+0      	; 0x75c <DIO_enutogglePinr+0x6>
 75c:	00 d0       	rcall	.+0      	; 0x75e <DIO_enutogglePinr+0x8>
 75e:	0f 92       	push	r0
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	8a 83       	std	Y+2, r24	; 0x02
 766:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState=ES_OK;
 768:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8PortID<=PORTD&&Copy_u8BitNumber<=DIO_PIN7)
 76a:	e2 e3       	ldi	r30, 0x32	; 50
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	90 81       	ld	r25, Z
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	98 17       	cp	r25, r24
 774:	08 f4       	brcc	.+2      	; 0x778 <DIO_enutogglePinr+0x22>
 776:	73 c0       	rjmp	.+230    	; 0x85e <DIO_enutogglePinr+0x108>
 778:	8b 81       	ldd	r24, Y+3	; 0x03
 77a:	88 30       	cpi	r24, 0x08	; 8
 77c:	08 f0       	brcs	.+2      	; 0x780 <DIO_enutogglePinr+0x2a>
 77e:	6f c0       	rjmp	.+222    	; 0x85e <DIO_enutogglePinr+0x108>
    {
        switch(Copy_u8PortID)
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	28 2f       	mov	r18, r24
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	3d 83       	std	Y+5, r19	; 0x05
 788:	2c 83       	std	Y+4, r18	; 0x04
 78a:	8c 81       	ldd	r24, Y+4	; 0x04
 78c:	9d 81       	ldd	r25, Y+5	; 0x05
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	91 05       	cpc	r25, r1
 792:	49 f1       	breq	.+82     	; 0x7e6 <DIO_enutogglePinr+0x90>
 794:	2c 81       	ldd	r18, Y+4	; 0x04
 796:	3d 81       	ldd	r19, Y+5	; 0x05
 798:	22 30       	cpi	r18, 0x02	; 2
 79a:	31 05       	cpc	r19, r1
 79c:	2c f4       	brge	.+10     	; 0x7a8 <DIO_enutogglePinr+0x52>
 79e:	8c 81       	ldd	r24, Y+4	; 0x04
 7a0:	9d 81       	ldd	r25, Y+5	; 0x05
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	61 f0       	breq	.+24     	; 0x7be <DIO_enutogglePinr+0x68>
 7a6:	5d c0       	rjmp	.+186    	; 0x862 <DIO_enutogglePinr+0x10c>
 7a8:	2c 81       	ldd	r18, Y+4	; 0x04
 7aa:	3d 81       	ldd	r19, Y+5	; 0x05
 7ac:	22 30       	cpi	r18, 0x02	; 2
 7ae:	31 05       	cpc	r19, r1
 7b0:	71 f1       	breq	.+92     	; 0x80e <DIO_enutogglePinr+0xb8>
 7b2:	8c 81       	ldd	r24, Y+4	; 0x04
 7b4:	9d 81       	ldd	r25, Y+5	; 0x05
 7b6:	83 30       	cpi	r24, 0x03	; 3
 7b8:	91 05       	cpc	r25, r1
 7ba:	e9 f1       	breq	.+122    	; 0x836 <DIO_enutogglePinr+0xe0>
 7bc:	52 c0       	rjmp	.+164    	; 0x862 <DIO_enutogglePinr+0x10c>
        {
        case DIO_PORTA:
            PORTA^=(1<<Copy_u8BitNumber);
 7be:	ab e3       	ldi	r26, 0x3B	; 59
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	eb e3       	ldi	r30, 0x3B	; 59
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	48 2f       	mov	r20, r24
 7ca:	8b 81       	ldd	r24, Y+3	; 0x03
 7cc:	28 2f       	mov	r18, r24
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 2e       	mov	r0, r18
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_enutogglePinr+0x86>
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	0a 94       	dec	r0
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_enutogglePinr+0x82>
 7e0:	84 27       	eor	r24, r20
 7e2:	8c 93       	st	X, r24
 7e4:	3e c0       	rjmp	.+124    	; 0x862 <DIO_enutogglePinr+0x10c>
            break;
        case DIO_PORTB:
            PORTB^=(1<<Copy_u8BitNumber);
 7e6:	a8 e3       	ldi	r26, 0x38	; 56
 7e8:	b0 e0       	ldi	r27, 0x00	; 0
 7ea:	e8 e3       	ldi	r30, 0x38	; 56
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	48 2f       	mov	r20, r24
 7f2:	8b 81       	ldd	r24, Y+3	; 0x03
 7f4:	28 2f       	mov	r18, r24
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 2e       	mov	r0, r18
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <DIO_enutogglePinr+0xae>
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	0a 94       	dec	r0
 806:	e2 f7       	brpl	.-8      	; 0x800 <DIO_enutogglePinr+0xaa>
 808:	84 27       	eor	r24, r20
 80a:	8c 93       	st	X, r24
 80c:	2a c0       	rjmp	.+84     	; 0x862 <DIO_enutogglePinr+0x10c>
            break;
        case DIO_PORTC:
            PORTC^=(1<<Copy_u8BitNumber);
 80e:	a5 e3       	ldi	r26, 0x35	; 53
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	e5 e3       	ldi	r30, 0x35	; 53
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	48 2f       	mov	r20, r24
 81a:	8b 81       	ldd	r24, Y+3	; 0x03
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 2e       	mov	r0, r18
 826:	02 c0       	rjmp	.+4      	; 0x82c <DIO_enutogglePinr+0xd6>
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	0a 94       	dec	r0
 82e:	e2 f7       	brpl	.-8      	; 0x828 <DIO_enutogglePinr+0xd2>
 830:	84 27       	eor	r24, r20
 832:	8c 93       	st	X, r24
 834:	16 c0       	rjmp	.+44     	; 0x862 <DIO_enutogglePinr+0x10c>
            break;
        case DIO_PORTD:
            PORTD^=(1<<Copy_u8BitNumber);
 836:	a2 e3       	ldi	r26, 0x32	; 50
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	e2 e3       	ldi	r30, 0x32	; 50
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	48 2f       	mov	r20, r24
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	28 2f       	mov	r18, r24
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 2e       	mov	r0, r18
 84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_enutogglePinr+0xfe>
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	0a 94       	dec	r0
 856:	e2 f7       	brpl	.-8      	; 0x850 <DIO_enutogglePinr+0xfa>
 858:	84 27       	eor	r24, r20
 85a:	8c 93       	st	X, r24
 85c:	02 c0       	rjmp	.+4      	; 0x862 <DIO_enutogglePinr+0x10c>
            break;
        }
    }
    else
    {
        Local_enuErrorState=ES_OUT_OF_RANGE;
 85e:	83 e0       	ldi	r24, 0x03	; 3
 860:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 862:	89 81       	ldd	r24, Y+1	; 0x01
}
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	0f 90       	pop	r0
 86a:	0f 90       	pop	r0
 86c:	0f 90       	pop	r0
 86e:	cf 91       	pop	r28
 870:	df 91       	pop	r29
 872:	08 95       	ret

00000874 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID,u8 Copy_u8BitNumber,u8 * Copy_pu8Value)
{
 874:	df 93       	push	r29
 876:	cf 93       	push	r28
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
 87c:	27 97       	sbiw	r28, 0x07	; 7
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	f8 94       	cli
 882:	de bf       	out	0x3e, r29	; 62
 884:	0f be       	out	0x3f, r0	; 63
 886:	cd bf       	out	0x3d, r28	; 61
 888:	8a 83       	std	Y+2, r24	; 0x02
 88a:	6b 83       	std	Y+3, r22	; 0x03
 88c:	5d 83       	std	Y+5, r21	; 0x05
 88e:	4c 83       	std	Y+4, r20	; 0x04
    ES_t Local_enuErrorState=ES_OK;
 890:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u8PortID<=PORTD&&Copy_u8BitNumber<=DIO_PIN7)
 892:	e2 e3       	ldi	r30, 0x32	; 50
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	90 81       	ld	r25, Z
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	98 17       	cp	r25, r24
 89c:	08 f4       	brcc	.+2      	; 0x8a0 <DIO_enuGetPinValue+0x2c>
 89e:	75 c0       	rjmp	.+234    	; 0x98a <DIO_enuGetPinValue+0x116>
 8a0:	8b 81       	ldd	r24, Y+3	; 0x03
 8a2:	88 30       	cpi	r24, 0x08	; 8
 8a4:	08 f0       	brcs	.+2      	; 0x8a8 <DIO_enuGetPinValue+0x34>
 8a6:	71 c0       	rjmp	.+226    	; 0x98a <DIO_enuGetPinValue+0x116>
    {
        switch(Copy_u8PortID)
 8a8:	8a 81       	ldd	r24, Y+2	; 0x02
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	3f 83       	std	Y+7, r19	; 0x07
 8b0:	2e 83       	std	Y+6, r18	; 0x06
 8b2:	4e 81       	ldd	r20, Y+6	; 0x06
 8b4:	5f 81       	ldd	r21, Y+7	; 0x07
 8b6:	41 30       	cpi	r20, 0x01	; 1
 8b8:	51 05       	cpc	r21, r1
 8ba:	59 f1       	breq	.+86     	; 0x912 <DIO_enuGetPinValue+0x9e>
 8bc:	8e 81       	ldd	r24, Y+6	; 0x06
 8be:	9f 81       	ldd	r25, Y+7	; 0x07
 8c0:	82 30       	cpi	r24, 0x02	; 2
 8c2:	91 05       	cpc	r25, r1
 8c4:	34 f4       	brge	.+12     	; 0x8d2 <DIO_enuGetPinValue+0x5e>
 8c6:	2e 81       	ldd	r18, Y+6	; 0x06
 8c8:	3f 81       	ldd	r19, Y+7	; 0x07
 8ca:	21 15       	cp	r18, r1
 8cc:	31 05       	cpc	r19, r1
 8ce:	69 f0       	breq	.+26     	; 0x8ea <DIO_enuGetPinValue+0x76>
 8d0:	5e c0       	rjmp	.+188    	; 0x98e <DIO_enuGetPinValue+0x11a>
 8d2:	4e 81       	ldd	r20, Y+6	; 0x06
 8d4:	5f 81       	ldd	r21, Y+7	; 0x07
 8d6:	42 30       	cpi	r20, 0x02	; 2
 8d8:	51 05       	cpc	r21, r1
 8da:	79 f1       	breq	.+94     	; 0x93a <DIO_enuGetPinValue+0xc6>
 8dc:	8e 81       	ldd	r24, Y+6	; 0x06
 8de:	9f 81       	ldd	r25, Y+7	; 0x07
 8e0:	83 30       	cpi	r24, 0x03	; 3
 8e2:	91 05       	cpc	r25, r1
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <DIO_enuGetPinValue+0x74>
 8e6:	3d c0       	rjmp	.+122    	; 0x962 <DIO_enuGetPinValue+0xee>
 8e8:	52 c0       	rjmp	.+164    	; 0x98e <DIO_enuGetPinValue+0x11a>
        {
        case DIO_PORTA:
            *Copy_pu8Value=GET_BIT(PINA,Copy_u8BitNumber);
 8ea:	e9 e3       	ldi	r30, 0x39	; 57
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	28 2f       	mov	r18, r24
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	8b 81       	ldd	r24, Y+3	; 0x03
 8f6:	88 2f       	mov	r24, r24
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	a9 01       	movw	r20, r18
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <DIO_enuGetPinValue+0x8e>
 8fe:	55 95       	asr	r21
 900:	47 95       	ror	r20
 902:	8a 95       	dec	r24
 904:	e2 f7       	brpl	.-8      	; 0x8fe <DIO_enuGetPinValue+0x8a>
 906:	ca 01       	movw	r24, r20
 908:	81 70       	andi	r24, 0x01	; 1
 90a:	ec 81       	ldd	r30, Y+4	; 0x04
 90c:	fd 81       	ldd	r31, Y+5	; 0x05
 90e:	80 83       	st	Z, r24
 910:	3e c0       	rjmp	.+124    	; 0x98e <DIO_enuGetPinValue+0x11a>
            break;
        case DIO_PORTB:
            *Copy_pu8Value=GET_BIT(PINB,Copy_u8BitNumber);
 912:	e6 e3       	ldi	r30, 0x36	; 54
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	28 2f       	mov	r18, r24
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	8b 81       	ldd	r24, Y+3	; 0x03
 91e:	88 2f       	mov	r24, r24
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	a9 01       	movw	r20, r18
 924:	02 c0       	rjmp	.+4      	; 0x92a <DIO_enuGetPinValue+0xb6>
 926:	55 95       	asr	r21
 928:	47 95       	ror	r20
 92a:	8a 95       	dec	r24
 92c:	e2 f7       	brpl	.-8      	; 0x926 <DIO_enuGetPinValue+0xb2>
 92e:	ca 01       	movw	r24, r20
 930:	81 70       	andi	r24, 0x01	; 1
 932:	ec 81       	ldd	r30, Y+4	; 0x04
 934:	fd 81       	ldd	r31, Y+5	; 0x05
 936:	80 83       	st	Z, r24
 938:	2a c0       	rjmp	.+84     	; 0x98e <DIO_enuGetPinValue+0x11a>
            break;
        case DIO_PORTC:
            *Copy_pu8Value=GET_BIT(PINC,Copy_u8BitNumber);
 93a:	e3 e3       	ldi	r30, 0x33	; 51
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	28 2f       	mov	r18, r24
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	88 2f       	mov	r24, r24
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	a9 01       	movw	r20, r18
 94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_enuGetPinValue+0xde>
 94e:	55 95       	asr	r21
 950:	47 95       	ror	r20
 952:	8a 95       	dec	r24
 954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_enuGetPinValue+0xda>
 956:	ca 01       	movw	r24, r20
 958:	81 70       	andi	r24, 0x01	; 1
 95a:	ec 81       	ldd	r30, Y+4	; 0x04
 95c:	fd 81       	ldd	r31, Y+5	; 0x05
 95e:	80 83       	st	Z, r24
 960:	16 c0       	rjmp	.+44     	; 0x98e <DIO_enuGetPinValue+0x11a>
            break;
        case DIO_PORTD:
            *Copy_pu8Value=GET_BIT(PIND,Copy_u8BitNumber);
 962:	e0 e3       	ldi	r30, 0x30	; 48
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	28 2f       	mov	r18, r24
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	8b 81       	ldd	r24, Y+3	; 0x03
 96e:	88 2f       	mov	r24, r24
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	a9 01       	movw	r20, r18
 974:	02 c0       	rjmp	.+4      	; 0x97a <DIO_enuGetPinValue+0x106>
 976:	55 95       	asr	r21
 978:	47 95       	ror	r20
 97a:	8a 95       	dec	r24
 97c:	e2 f7       	brpl	.-8      	; 0x976 <DIO_enuGetPinValue+0x102>
 97e:	ca 01       	movw	r24, r20
 980:	81 70       	andi	r24, 0x01	; 1
 982:	ec 81       	ldd	r30, Y+4	; 0x04
 984:	fd 81       	ldd	r31, Y+5	; 0x05
 986:	80 83       	st	Z, r24
 988:	02 c0       	rjmp	.+4      	; 0x98e <DIO_enuGetPinValue+0x11a>
            break;
        }
    }
    else
    {
        Local_enuErrorState=ES_OUT_OF_RANGE;
 98a:	83 e0       	ldi	r24, 0x03	; 3
 98c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorState;
 98e:	89 81       	ldd	r24, Y+1	; 0x01
}
 990:	27 96       	adiw	r28, 0x07	; 7
 992:	0f b6       	in	r0, 0x3f	; 63
 994:	f8 94       	cli
 996:	de bf       	out	0x3e, r29	; 62
 998:	0f be       	out	0x3f, r0	; 63
 99a:	cd bf       	out	0x3d, r28	; 61
 99c:	cf 91       	pop	r28
 99e:	df 91       	pop	r29
 9a0:	08 95       	ret

000009a2 <main>:
#include "STD_types.h"
#include "util/delay.h"
#include "DIO_private.h"
#include "STD_MATH.h"
int main()
{
 9a2:	df 93       	push	r29
 9a4:	cf 93       	push	r28
 9a6:	00 d0       	rcall	.+0      	; 0x9a8 <main+0x6>
 9a8:	0f 92       	push	r0
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
    DIO_enInit();
 9ae:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enInit>
    DIO_enuSetPortDirection(DIO_PORTA,0xff);
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	6f ef       	ldi	r22, 0xFF	; 255
 9b6:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_enuSetPortDirection>
    DIO_enuSetPortDirection(DIO_PORTB,0x00);
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_enuSetPortDirection>
    DIO_enuSetPortValue(DIO_PORTA,0x00);
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	60 e0       	ldi	r22, 0x00	; 0
 9c6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_enuSetPortValue>
    DIO_enuSetPortValue(DIO_PORTB,0xff);
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	6f ef       	ldi	r22, 0xFF	; 255
 9ce:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_enuSetPortValue>
    u8 b0,b1,b2;
    while(1)
    {
        b0=GET_BIT(PINB,0);
 9d2:	e6 e3       	ldi	r30, 0x36	; 54
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	80 81       	ld	r24, Z
 9d8:	81 70       	andi	r24, 0x01	; 1
 9da:	8b 83       	std	Y+3, r24	; 0x03
        b1=GET_BIT(PINB,1);
 9dc:	e6 e3       	ldi	r30, 0x36	; 54
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	86 95       	lsr	r24
 9e4:	81 70       	andi	r24, 0x01	; 1
 9e6:	8a 83       	std	Y+2, r24	; 0x02
        b2=GET_BIT(PINB,2);
 9e8:	e6 e3       	ldi	r30, 0x36	; 54
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	80 81       	ld	r24, Z
 9ee:	86 95       	lsr	r24
 9f0:	86 95       	lsr	r24
 9f2:	81 70       	andi	r24, 0x01	; 1
 9f4:	89 83       	std	Y+1, r24	; 0x01
        if(b0==0)
 9f6:	8b 81       	ldd	r24, Y+3	; 0x03
 9f8:	88 23       	and	r24, r24
 9fa:	81 f4       	brne	.+32     	; 0xa1c <main+0x7a>
        {
            SET_BIT(PORTA,0);
 9fc:	ab e3       	ldi	r26, 0x3B	; 59
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	eb e3       	ldi	r30, 0x3B	; 59
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	81 60       	ori	r24, 0x01	; 1
 a08:	8c 93       	st	X, r24
            while((b0=GET_BIT(PINB,0))==0);
 a0a:	e6 e3       	ldi	r30, 0x36	; 54
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	81 70       	andi	r24, 0x01	; 1
 a12:	8b 83       	std	Y+3, r24	; 0x03
 a14:	8b 81       	ldd	r24, Y+3	; 0x03
 a16:	88 23       	and	r24, r24
 a18:	c1 f3       	breq	.-16     	; 0xa0a <main+0x68>
 a1a:	2f c0       	rjmp	.+94     	; 0xa7a <main+0xd8>

        }
        else if(b1==0)
 a1c:	8a 81       	ldd	r24, Y+2	; 0x02
 a1e:	88 23       	and	r24, r24
 a20:	89 f4       	brne	.+34     	; 0xa44 <main+0xa2>
        {
            SET_BIT(PORTA,1);
 a22:	ab e3       	ldi	r26, 0x3B	; 59
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	eb e3       	ldi	r30, 0x3B	; 59
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	82 60       	ori	r24, 0x02	; 2
 a2e:	8c 93       	st	X, r24
            while((b1=GET_BIT(PINB,1))==0);
 a30:	e6 e3       	ldi	r30, 0x36	; 54
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	80 81       	ld	r24, Z
 a36:	86 95       	lsr	r24
 a38:	81 70       	andi	r24, 0x01	; 1
 a3a:	8a 83       	std	Y+2, r24	; 0x02
 a3c:	8a 81       	ldd	r24, Y+2	; 0x02
 a3e:	88 23       	and	r24, r24
 a40:	b9 f3       	breq	.-18     	; 0xa30 <main+0x8e>
 a42:	1b c0       	rjmp	.+54     	; 0xa7a <main+0xd8>
        }
        else if(b2==0)
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	88 23       	and	r24, r24
 a48:	c1 f4       	brne	.+48     	; 0xa7a <main+0xd8>
        {
            SET_BIT(PORTA,1);
 a4a:	ab e3       	ldi	r26, 0x3B	; 59
 a4c:	b0 e0       	ldi	r27, 0x00	; 0
 a4e:	eb e3       	ldi	r30, 0x3B	; 59
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	82 60       	ori	r24, 0x02	; 2
 a56:	8c 93       	st	X, r24
            SET_BIT(PORTA,0);
 a58:	ab e3       	ldi	r26, 0x3B	; 59
 a5a:	b0 e0       	ldi	r27, 0x00	; 0
 a5c:	eb e3       	ldi	r30, 0x3B	; 59
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	81 60       	ori	r24, 0x01	; 1
 a64:	8c 93       	st	X, r24
            while((b2=GET_BIT(PINB,2))==0);
 a66:	e6 e3       	ldi	r30, 0x36	; 54
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	80 81       	ld	r24, Z
 a6c:	86 95       	lsr	r24
 a6e:	86 95       	lsr	r24
 a70:	81 70       	andi	r24, 0x01	; 1
 a72:	89 83       	std	Y+1, r24	; 0x01
 a74:	89 81       	ldd	r24, Y+1	; 0x01
 a76:	88 23       	and	r24, r24
 a78:	b1 f3       	breq	.-20     	; 0xa66 <main+0xc4>
        }
        CLEAR_BIT(PORTA,0);
 a7a:	ab e3       	ldi	r26, 0x3B	; 59
 a7c:	b0 e0       	ldi	r27, 0x00	; 0
 a7e:	eb e3       	ldi	r30, 0x3B	; 59
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	80 81       	ld	r24, Z
 a84:	8e 7f       	andi	r24, 0xFE	; 254
 a86:	8c 93       	st	X, r24
        CLEAR_BIT(PORTA,1);
 a88:	ab e3       	ldi	r26, 0x3B	; 59
 a8a:	b0 e0       	ldi	r27, 0x00	; 0
 a8c:	eb e3       	ldi	r30, 0x3B	; 59
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	80 81       	ld	r24, Z
 a92:	8d 7f       	andi	r24, 0xFD	; 253
 a94:	8c 93       	st	X, r24
        CLEAR_BIT(PORTA,2);
 a96:	ab e3       	ldi	r26, 0x3B	; 59
 a98:	b0 e0       	ldi	r27, 0x00	; 0
 a9a:	eb e3       	ldi	r30, 0x3B	; 59
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	80 81       	ld	r24, Z
 aa0:	8b 7f       	andi	r24, 0xFB	; 251
 aa2:	8c 93       	st	X, r24
 aa4:	96 cf       	rjmp	.-212    	; 0x9d2 <main+0x30>

00000aa6 <_exit>:
 aa6:	f8 94       	cli

00000aa8 <__stop_program>:
 aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <__stop_program>
